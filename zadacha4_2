/*4.2.Послідовність Фібоначчі визначається наступною рекурсивною формулою:
F(0) = 0; F(1) = 1; F(N) = F(N-1) + F(N-2) if N>=2 Написати функцію
public func solution(_ N : Int) -> Int
що за заданим позитивним числом N повертає шість останніх цифр десяткового числа F(N)
Для прикладу, дано N = 8, функція має повернути 21, так само N = 36 - повертає 930 352 (бо повне число 14 930 352 )
Припустити що: N - ціле в діапазоні 0… 2 147 483 647 
Оскільки в ініціалізації не вказано throws - при помилці діапазону функція видає -1*/
public func solution(_ n : Int) -> Int {
    switch n {
    case (..<0): return -1
    case 2_147_483_648...: return -1
    case 0: return 0
    case 1: return 1
    default: 
        var outValue = 1
        var i1 = 0
        var i2 = 1
        for i in 2...n { 
            outValue = (i1 + i2) % 1000000
            i1 = i2
            i2 = outValue      
        }
        return outValue
    }
}
//testing
var testNumbers: [Int] = [0, 1, 2, 3, 8, 36, 123456, -24, 12_345_678_901]
testNumbers.forEach{
    print("F \($0) =", solution($0))
}
