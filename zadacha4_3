/*4.3. Дано непорожній масив з N цілих елементів. Кожен елемент розглядається як відносний вказівник на наступний елемент масиву.
 Тобто, якщо А(К) = М тоді елемент А(К) вказує на елемент А(К+М). Масив визначає послідовність стрибків пішака:
 Починає йти з клітинки А(0); Кожен крок пішак просувається від елементу А(К) до наступного, на який вказує елемент А(К). 
Пішак може стрибати вічно або вискочити за межі масиву. Написати функцію, public func solution(_ A : inout [Int]] -> Int 
яка за даним непорожнім масивом А що містить N цілих повертає кількість стрибків після яких пішак вийде за межі масиву. 
Якщо цього ніколи не станеться - повернути “-1” */

 public func solution(_ inArray: inout [Int]) -> Int {
    var pathArray: [Int] = [0]
    var currentPosition: Int = 0
    var numberOfSteps = 0
    guard !(inArray.isEmpty) else {return 0}
    repeat {
        numberOfSteps += 1     
        currentPosition += inArray[currentPosition] 
        if (currentPosition>=inArray.count)||(currentPosition<0) {return numberOfSteps}
        pathArray.append(currentPosition) 
    } while pathArray.filter{$0 == currentPosition}.count != 2
    return -1
}
// test Array init and testing
let inArrays = [[1, 2, 3, 1, -2, -1, 1], [1, 1, 1, 1, -10], [2, 1, 1, 1, 2, 5], [1, 2, -2, -2, 1, 1, 0], [1,-1], [0], [1], []]
inArrays.forEach { 
    var array = $0
    print("inArray= \($0) numberOfSteps = \(solution(&array))")
}
